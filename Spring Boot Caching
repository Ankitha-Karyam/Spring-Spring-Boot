What is Caching in Spring Boot?
===============================
Caching is a mechanism to store frequently accessed data in a temporary storage area, so that future requests for that data can be served faster. In Spring Boot, caching helps improve the performance of your application by reducing the need to repeatedly fetch data from a database or perform expensive computations.

How to Implement Caching in Spring Boot
=======================================
Enable Caching: 
===============
Use the @EnableCaching annotation in your configuration class to enable caching support.
Add Dependencies: Include the necessary caching dependencies in your project.
Use Caching Annotations:
========================
Apply caching annotations like @Cacheable, @CachePut, and @CacheEvict to your service methods.
Configure Cache Manager:
========================
Define a CacheManager bean to manage your cache.
Key Caching Annotations
@EnableCaching:
===============
This annotation is used to enable caching in your Spring Boot application. It should be added to a configuration class.

import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableCaching
public class CacheConfig {
}
@Cacheable:
===========
This annotation is used to indicate that the result of a method call should be cached. If the method is called again with the same parameters, the cached result is returned instead of executing the method.

import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

@Service
public class MyService {

    @Cacheable("items")
    public Item getItemById(Long id) {
        // Simulate a costly operation
        return findItemById(id);
    }

    private Item findItemById(Long id) {
        // Simulate a database call
        return new Item(id, "ItemName");
    }
}
@CachePut:
==========
This annotation is used to update the cache with the result of a method call. It ensures that the cache is updated even if the method is called with the same parameters.

import org.springframework.cache.annotation.CachePut;
import org.springframework.stereotype.Service;

@Service
public class MyService {

    @CachePut("items")
    public Item updateItem(Item item) {
        // Update the item in the database
        return saveItem(item);
    }

    private Item saveItem(Item item) {
        // Simulate a database save operation
        return item;
    }
}
@CacheEvict:
============
This annotation is used to remove an entry from the cache. It can be used to clear the cache when an item is deleted or updated.

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.stereotype.Service;

@Service
public class MyService {

    @CacheEvict("items")
    public void deleteItem(Long id) {
        // Delete the item from the database
        removeItemById(id);
    }

    private void removeItemById(Long id) {
        // Simulate a database delete operation
    }
}
Types of Caching
================
In-Memory Caching:
==================
This type of caching stores data in the memory of the application server. It is fast and easy to implement but may not be suitable for large-scale applications due to memory limitations. Examples include:

ConcurrentMapCacheManager:
==========================
A simple in-memory cache manager provided by Spring.
EhCache:
========
A more advanced in-memory cache with additional features like eviction policies and persistence.
Distributed Caching:
====================
This type of caching stores data across multiple servers, making it suitable for large-scale applications.
It provides better scalability and fault tolerance. Examples include:

Redis: 
======
An in-memory data structure store that can be used as a distributed cache.
Hazelcast:
==========
An in-memory data grid that provides distributed caching capabilities.
Example Configuration for In-Memory Caching with ConcurrentMapCacheManager
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableCaching
public class CacheConfig {

    @Bean
    public CacheManager cacheManager() {
        return new ConcurrentMapCacheManager("items");
    }
}
Example Configuration for Distributed Caching with Redis
Add Redis dependencies to your pom.xml:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
Configure Redis in your application.properties:

spring.cache.type=redis
spring.redis.host=localhost
6379
Define a CacheManager bean for Redis:

import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.redis.RedisCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;

@Configuration
@EnableCaching
public class CacheConfig {

    @Bean
    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {
        return RedisCacheManager.create(redisConnectionFactory);
    }
}
