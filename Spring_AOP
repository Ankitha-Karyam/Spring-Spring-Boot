Spring AOP
==========
Spring AOP (Aspect-Oriented Programming) is a powerful feature of the Spring Framework
that allows you to modularize cross-cutting concerns, such as logging, security, and transaction management,
into separate aspects. This helps in keeping your code clean and maintainable by separating these concerns from the business logic.
Key Concepts of Spring AOP
==========================
Aspect:  A module that encapsulates a concern that cuts across multiple classes. For example, logging or transaction management.
-> In Spring AOP, aspects are implemented by using regular classes or regular classes annotated with @Aspect annotation.

Join Point:  A point during the execution of a program, such as the execution of a method or the handling of an exception.
-> Here its the method (where logging or cross cutting concerns are there)

Advice: Action taken by an aspect at a particular join point.
->Different types of advice include:
Before Advice: Executed before a join point.
After Advice: Executed after a join point, regardless of its outcome.
After Returning Advice: Executed after a join point completes normally.
After Throwing Advice: Executed if a method exits by throwing an exception.
Around Advice: Surrounds a join point, allowing you to perform actions before and after the method execution.

Pointcut: A predicate that matches join points. Advice is associated with a pointcut expression and runs at any join point matched by the pointcut.

